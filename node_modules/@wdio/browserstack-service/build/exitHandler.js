"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.shouldCallCleanup = exports.setupExitHandlers = void 0;
const node_child_process_1 = require("node:child_process");
const node_path_1 = __importDefault(require("node:path"));
const config_1 = __importDefault(require("./config"));
const funnelInstrumentation_1 = require("./instrumentation/funnelInstrumentation");
const constants_1 = require("./constants");
const bstackLogger_1 = require("./bstackLogger");
function setupExitHandlers() {
    process.on('exit', (code) => {
        bstackLogger_1.BStackLogger.debug('Exit hook called');
        const args = shouldCallCleanup(config_1.default.getInstance());
        if (Array.isArray(args) && args.length) {
            bstackLogger_1.BStackLogger.debug('Spawning cleanup with args ' + args.toString());
            const childProcess = (0, node_child_process_1.spawn)('node', [`${node_path_1.default.join(__dirname, 'cleanup.js')}`, ...args], { detached: true, stdio: 'inherit', env: { ...process.env } });
            childProcess.unref();
            process.exit(code);
        }
    });
}
exports.setupExitHandlers = setupExitHandlers;
function shouldCallCleanup(config) {
    const args = [];
    if (!!process.env[constants_1.TESTOPS_JWT_ENV] && !config.testObservability.buildStopped) {
        args.push('--observability');
    }
    if (config.userName && config.accessKey && !config.funnelDataSent) {
        const savedFilePath = (0, funnelInstrumentation_1.saveFunnelData)('SDKTestSuccessful', config);
        args.push('--funnelData', savedFilePath);
    }
    return args;
}
exports.shouldCallCleanup = shouldCallCleanup;
