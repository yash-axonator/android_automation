"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fireFunnelRequest = exports.saveFunnelData = exports.sendFinish = exports.sendStart = void 0;
const node_os_1 = __importDefault(require("node:os"));
const node_util_1 = __importDefault(require("node:util"));
const node_path_1 = __importDefault(require("node:path"));
const node_fs_1 = __importDefault(require("node:fs"));
const got_1 = __importDefault(require("got"));
const usageStats_1 = __importDefault(require("../testOps/usageStats"));
const bstackLogger_1 = require("../bstackLogger");
const constants_1 = require("../constants");
const data_store_1 = require("../data-store");
async function fireFunnelTestEvent(eventType, config) {
    if (!config.userName || !config.accessKey) {
        bstackLogger_1.BStackLogger.debug('username/accesskey not passed');
        return;
    }
    try {
        const data = buildEventData(eventType, config);
        await fireFunnelRequest(data);
        bstackLogger_1.BStackLogger.debug('Funnel event success');
        if (eventType === 'SDKTestSuccessful') {
            config.sentFunnelData();
        }
    }
    catch (error) {
        bstackLogger_1.BStackLogger.debug('Exception in sending funnel data: ' + error);
    }
}
async function sendStart(config) {
    await fireFunnelTestEvent('SDKTestAttempted', config);
}
exports.sendStart = sendStart;
async function sendFinish(config) {
    await fireFunnelTestEvent('SDKTestSuccessful', config);
}
exports.sendFinish = sendFinish;
function saveFunnelData(eventType, config) {
    const data = buildEventData(eventType, config);
    bstackLogger_1.BStackLogger.ensureLogsFolder();
    const filePath = node_path_1.default.join(bstackLogger_1.BStackLogger.logFolderPath, 'funnelData.json');
    node_fs_1.default.writeFileSync(filePath, JSON.stringify(data));
    return filePath;
}
exports.saveFunnelData = saveFunnelData;
// Called from two different process
async function fireFunnelRequest(data) {
    bstackLogger_1.BStackLogger.debug('Sending SDK event with data ' + node_util_1.default.inspect(data, { depth: 6 }));
    await got_1.default.post(constants_1.FUNNEL_INSTRUMENTATION_URL, {
        headers: {
            'content-type': 'application/json'
        }, username: data.userName, password: data.accessKey, json: data
    });
}
exports.fireFunnelRequest = fireFunnelRequest;
function getProductList(config) {
    const products = [];
    if (config.testObservability.enabled) {
        products.push('observability');
    }
    if (config.accessibility) {
        products.push('accessibility');
    }
    if (config.percy) {
        products.push('percy');
    }
    if (config.automate) {
        products.push('automate');
    }
    if (config.appAutomate) {
        products.push('app-automate');
    }
    return products;
}
function getProductMap(config) {
    return {
        'observability': config.testObservability.enabled,
        'accessibility': config.accessibility,
        'percy': config.percy,
        'automate': config.automate,
        'app_automate': config.appAutomate
    };
}
function buildEventData(eventType, config) {
    const eventProperties = {
        // Framework Details
        language_framework: getLanguageFramework(config.framework),
        referrer: getReferrer(config.framework),
        language: 'WebdriverIO',
        languageVersion: process.version,
        // Build Details
        buildName: config.buildName || 'undefined',
        buildIdentifier: String(config.buildIdentifier),
        // Host details
        os: node_os_1.default.type() || 'unknown',
        hostname: node_os_1.default.hostname() || 'unknown',
        // Product Details
        productMap: getProductMap(config),
        product: getProductList(config),
    };
    if (eventType === 'SDKTestSuccessful') {
        const workerData = (0, data_store_1.getDataFromWorkers)();
        eventProperties.productUsage = getProductUsage(workerData);
    }
    return {
        userName: config.userName,
        accessKey: config.accessKey,
        event_type: eventType,
        detectedFramework: 'WebdriverIO-' + config.framework,
        event_properties: eventProperties
    };
}
function getProductUsage(workersData) {
    return {
        testObservability: usageStats_1.default.getInstance().getFormattedData(workersData)
    };
}
function getLanguageFramework(framework) {
    return 'WebdriverIO_' + framework;
}
function getReferrer(framework) {
    const fullName = framework ? 'WebdriverIO-' + framework : 'WebdriverIO';
    return `${fullName}/${constants_1.BSTACK_SERVICE_VERSION}`;
}
