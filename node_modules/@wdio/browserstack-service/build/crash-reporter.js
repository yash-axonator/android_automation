"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const logger_1 = __importDefault(require("@wdio/logger"));
const got_1 = __importDefault(require("got"));
// @ts-ignore
const package_json_1 = require("../package.json");
const constants_1 = require("./constants");
const util_1 = require("./util");
const log = (0, logger_1.default)('@wdio/browserstack-service');
class CrashReporter {
    static setCredentialsForCrashReportUpload(options, config) {
        this.credentialsForCrashReportUpload = {
            username: (0, util_1.getObservabilityUser)(options, config),
            password: (0, util_1.getObservabilityKey)(options, config)
        };
        process.env.CREDENTIALS_FOR_CRASH_REPORTING = JSON.stringify(this.credentialsForCrashReportUpload);
    }
    static setConfigDetails(userConfig, capabilities, options) {
        const configWithoutPII = this.filterPII(userConfig);
        this.userConfigForReporting = {
            framework: userConfig.framework,
            services: configWithoutPII.services,
            capabilities: capabilities,
            env: {
                'BROWSERSTACK_BUILD': process.env.BROWSERSTACK_BUILD,
                'BROWSERSTACK_BUILD_NAME': process.env.BROWSERSTACK_BUILD_NAME,
                'BUILD_TAG': process.env.BUILD_TAG
            }
        };
        process.env.USER_CONFIG_FOR_REPORTING = JSON.stringify(this.userConfigForReporting);
        this.setCredentialsForCrashReportUpload(options, userConfig);
    }
    static async uploadCrashReport(exception, stackTrace) {
        try {
            if (!this.credentialsForCrashReportUpload.username || !this.credentialsForCrashReportUpload.password) {
                this.credentialsForCrashReportUpload = process.env.CREDENTIALS_FOR_CRASH_REPORTING !== undefined ? JSON.parse(process.env.CREDENTIALS_FOR_CRASH_REPORTING) : this.credentialsForCrashReportUpload;
            }
        }
        catch (error) {
            return log.error(`[Crash_Report_Upload] Failed to parse user credentials while reporting crash due to ${error}`);
        }
        if (!this.credentialsForCrashReportUpload.username || !this.credentialsForCrashReportUpload.password) {
            return log.error('[Crash_Report_Upload] Failed to parse user credentials while reporting crash');
        }
        try {
            if (Object.keys(this.userConfigForReporting).length === 0) {
                this.userConfigForReporting = process.env.USER_CONFIG_FOR_REPORTING !== undefined ? JSON.parse(process.env.USER_CONFIG_FOR_REPORTING) : {};
            }
        }
        catch (error) {
            log.error(`[Crash_Report_Upload] Failed to parse user config while reporting crash due to ${error}`);
            this.userConfigForReporting = {};
        }
        const data = {
            hashed_id: process.env[constants_1.TESTOPS_BUILD_ID_ENV],
            observability_version: {
                frameworkName: 'WebdriverIO-' + (this.userConfigForReporting.framework || 'null'),
                sdkVersion: package_json_1.version
            },
            exception: {
                error: exception.toString(),
                stackTrace: stackTrace
            },
            config: this.userConfigForReporting
        };
        const url = `${constants_1.DATA_ENDPOINT}/api/v1/analytics`;
        got_1.default.post(url, {
            ...util_1.DEFAULT_REQUEST_CONFIG,
            ...this.credentialsForCrashReportUpload,
            json: data
        }).text().then(response => {
            log.debug(`[Crash_Report_Upload] Success response: ${JSON.stringify(response)}`);
        }).catch((error) => {
            log.error(`[Crash_Report_Upload] Failed due to ${error}`);
        });
    }
    static deletePIIKeysFromObject(obj) {
        if (!obj) {
            return;
        }
        ['user', 'username', 'key', 'accessKey'].forEach(key => delete obj[key]);
    }
    static filterPII(userConfig) {
        const configWithoutPII = JSON.parse(JSON.stringify(userConfig));
        this.deletePIIKeysFromObject(configWithoutPII);
        const finalServices = [];
        const initialServices = configWithoutPII.services;
        delete configWithoutPII.services;
        try {
            for (const serviceArray of initialServices) {
                if (Array.isArray(serviceArray) && serviceArray.length >= 2 && serviceArray[0] === 'browserstack') {
                    for (let idx = 1; idx < serviceArray.length; idx++) {
                        this.deletePIIKeysFromObject(serviceArray[idx]);
                        serviceArray[idx] && this.deletePIIKeysFromObject(serviceArray[idx].testObservabilityOptions);
                    }
                    finalServices.push(serviceArray);
                    break;
                }
            }
        }
        catch (err) {
            /* Wrong configuration like strings instead of json objects could break this method, needs no action */
            log.error(`Error in parsing user config PII with error ${err ? (err.stack || err) : err}`);
            return configWithoutPII;
        }
        configWithoutPII.services = finalServices;
        return configWithoutPII;
    }
}
/* User test config for build run minus PII */
CrashReporter.userConfigForReporting = {};
/* User credentials used for reporting crashes in browserstack service */
CrashReporter.credentialsForCrashReportUpload = {};
exports.default = CrashReporter;
