"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.saveWorkerData = exports.getDataFromWorkers = void 0;
const node_path_1 = __importDefault(require("node:path"));
const node_fs_1 = __importDefault(require("node:fs"));
const bstackLogger_1 = require("./bstackLogger");
const workersDataDirPath = node_path_1.default.join(process.cwd(), 'logs', 'worker_data');
function getDataFromWorkers() {
    const workersData = [];
    if (!node_fs_1.default.existsSync(workersDataDirPath)) {
        return workersData;
    }
    const files = node_fs_1.default.readdirSync(workersDataDirPath);
    files.forEach((file) => {
        bstackLogger_1.BStackLogger.debug('Reading worker file ' + file);
        const filePath = node_path_1.default.join(workersDataDirPath, file);
        const fileContent = node_fs_1.default.readFileSync(filePath, 'utf8');
        const workerData = JSON.parse(fileContent);
        workersData.push(workerData);
    });
    // Remove worker data after all reading
    removeWorkersDataDir();
    return workersData;
}
exports.getDataFromWorkers = getDataFromWorkers;
function saveWorkerData(data) {
    const filePath = node_path_1.default.join(workersDataDirPath, 'worker-data-' + process.pid + '.json');
    try {
        createWorkersDataDir();
        node_fs_1.default.writeFileSync(filePath, JSON.stringify(data));
    }
    catch (e) {
        bstackLogger_1.BStackLogger.debug('Exception in saving worker data: ' + e);
    }
}
exports.saveWorkerData = saveWorkerData;
function removeWorkersDataDir() {
    node_fs_1.default.rmSync(workersDataDirPath, { recursive: true, force: true });
    return true;
}
function createWorkersDataDir() {
    if (!node_fs_1.default.existsSync(workersDataDirPath)) {
        node_fs_1.default.mkdirSync(workersDataDirPath, { recursive: true });
    }
    return true;
}
