"use strict";
// ======= Percy helper methods start =======
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBestPlatformForPercySnapshot = exports.stopPercy = exports.startPercy = void 0;
const PercyLogger_1 = require("./PercyLogger");
const Percy_1 = __importDefault(require("./Percy"));
const startPercy = async (options, config, bsConfig) => {
    PercyLogger_1.PercyLogger.debug('Starting percy');
    const percy = new Percy_1.default(options, config, bsConfig);
    const response = await percy.start();
    if (response) {
        return percy;
    }
    return {};
};
exports.startPercy = startPercy;
const stopPercy = async (percy) => {
    PercyLogger_1.PercyLogger.debug('Stopping percy');
    return percy.stop();
};
exports.stopPercy = stopPercy;
const getBestPlatformForPercySnapshot = (capabilities) => {
    try {
        const percyBrowserPreference = { 'chrome': 0, 'firefox': 1, 'edge': 2, 'safari': 3 };
        let bestPlatformCaps = null;
        let bestBrowser = null;
        if (Array.isArray(capabilities)) {
            capabilities
                .flatMap((c) => {
                if (Object.values(c).length > 0 && Object.values(c).every(c => typeof c === 'object' && c.capabilities)) {
                    return Object.values(c).map((o) => o.capabilities);
                }
                return c;
            }).forEach((capability) => {
                var _a;
                let currBrowserName = capability.browserName;
                if (capability['bstack:options']) {
                    currBrowserName = capability['bstack:options'].browserName || currBrowserName;
                }
                if (!bestBrowser || !bestPlatformCaps || (bestPlatformCaps.deviceName || ((_a = bestPlatformCaps['bstack:options']) === null || _a === void 0 ? void 0 : _a.deviceName))) {
                    bestBrowser = currBrowserName;
                    bestPlatformCaps = capability;
                }
                else if (currBrowserName && percyBrowserPreference[currBrowserName.toLowerCase()] < percyBrowserPreference[bestBrowser.toLowerCase()]) {
                    bestBrowser = currBrowserName;
                    bestPlatformCaps = capability;
                }
            });
            return bestPlatformCaps;
        }
        else if (typeof capabilities === 'object') {
            Object.entries(capabilities).forEach(([, caps]) => {
                var _a, _b;
                let currBrowserName = caps.capabilities.browserName;
                if (caps.capabilities['bstack:options']) {
                    currBrowserName = ((_a = caps.capabilities['bstack:options']) === null || _a === void 0 ? void 0 : _a.browserName) || currBrowserName;
                }
                if (!bestBrowser || !bestPlatformCaps || (bestPlatformCaps.deviceName || ((_b = bestPlatformCaps['bstack:options']) === null || _b === void 0 ? void 0 : _b.deviceName))) {
                    bestBrowser = currBrowserName;
                    bestPlatformCaps = caps.capabilities;
                }
                else if (currBrowserName && percyBrowserPreference[currBrowserName.toLowerCase()] < percyBrowserPreference[bestBrowser.toLowerCase()]) {
                    bestBrowser = currBrowserName;
                    bestPlatformCaps = caps.capabilities;
                }
            });
            return bestPlatformCaps;
        }
    }
    catch (err) {
        PercyLogger_1.PercyLogger.error(`Error while trying to determine best platform for Percy snapshot ${err}`);
        return null;
    }
};
exports.getBestPlatformForPercySnapshot = getBestPlatformForPercySnapshot;
