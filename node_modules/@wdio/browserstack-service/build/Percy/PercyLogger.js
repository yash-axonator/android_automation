"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.PercyLogger = void 0;
const node_path_1 = __importDefault(require("node:path"));
const node_fs_1 = __importDefault(require("node:fs"));
const logger_1 = __importDefault(require("@wdio/logger"));
const constants_1 = require("../constants");
const log = (0, logger_1.default)('@wdio/browserstack-service');
class PercyLogger {
    static logToFile(logMessage, logLevel) {
        try {
            if (!this.logFileStream) {
                if (!node_fs_1.default.existsSync(this.logFolderPath)) {
                    node_fs_1.default.mkdirSync(this.logFolderPath);
                }
                this.logFileStream = node_fs_1.default.createWriteStream(this.logFilePath, { flags: 'a' });
            }
            if (this.logFileStream && this.logFileStream.writable) {
                this.logFileStream.write(this.formatLog(logMessage, logLevel));
            }
        }
        catch (error) {
            log.debug(`Failed to log to file. Error ${error}`);
        }
    }
    static formatLog(logMessage, level) {
        return `${new Date().toISOString()} ${level.toUpperCase()} @wdio/browserstack-service ${logMessage}\n`;
    }
    static info(message) {
        this.logToFile(message, 'info');
        log.info(message);
    }
    static error(message) {
        this.logToFile(message, 'error');
        log.error(message);
    }
    static debug(message, param) {
        this.logToFile(message, 'debug');
        if (param) {
            log.debug(message, param);
        }
        else {
            log.debug(message);
        }
    }
    static warn(message) {
        this.logToFile(message, 'warn');
        log.warn(message);
    }
    static trace(message) {
        this.logToFile(message, 'trace');
        log.trace(message);
    }
    static clearLogger() {
        if (this.logFileStream) {
            this.logFileStream.end();
        }
        this.logFileStream = null;
    }
    static clearLogFile() {
        try {
            if (node_fs_1.default.existsSync(this.logFilePath)) {
                node_fs_1.default.truncateSync(this.logFilePath);
            }
        }
        catch (err) {
            log.error(`Failed to clear percy.log file. Error ${err}`);
        }
    }
}
exports.PercyLogger = PercyLogger;
PercyLogger.logFilePath = node_path_1.default.join(process.cwd(), constants_1.PERCY_LOGS_FILE);
PercyLogger.logFolderPath = node_path_1.default.join(process.cwd(), 'logs');
