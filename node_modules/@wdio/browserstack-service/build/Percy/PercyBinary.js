"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const yauzl_1 = __importDefault(require("yauzl"));
const fs = require('node:fs');
const got_1 = __importDefault(require("got"));
const node_path_1 = __importDefault(require("node:path"));
const node_os_1 = __importDefault(require("node:os"));
const promises_1 = __importDefault(require("node:fs/promises"));
const node_child_process_1 = require("node:child_process");
const PercyLogger_1 = require("./PercyLogger");
class PercyBinary {
    constructor() {
        this._hostOS = process.platform;
        this._httpPath = null;
        this._binaryName = 'percy';
        this._orderedPaths = [
            node_path_1.default.join(node_os_1.default.homedir(), '.browserstack'),
            process.cwd(),
            node_os_1.default.tmpdir()
        ];
        const base = 'https://github.com/percy/cli/releases/latest/download';
        if (this._hostOS.match(/darwin|mac os/i)) {
            this._httpPath = base + '/percy-osx.zip';
        }
        else if (this._hostOS.match(/mswin|msys|mingw|cygwin|bccwin|wince|emc|win32/i)) {
            this._httpPath = base + '/percy-win.zip';
            this._binaryName = 'percy.exe';
        }
        else {
            this._httpPath = base + '/percy-linux.zip';
        }
    }
    async makePath(path) {
        if (await this.checkPath(path)) {
            return true;
        }
        return promises_1.default.mkdir(path).then(() => true).catch(() => false);
    }
    async checkPath(path) {
        try {
            const hasDir = await promises_1.default.access(path).then(() => true, () => false);
            if (hasDir) {
                return true;
            }
        }
        catch (err) {
            return false;
        }
    }
    async _getAvailableDirs() {
        for (let i = 0; i < this._orderedPaths.length; i++) {
            const path = this._orderedPaths[i];
            if (await this.makePath(path)) {
                return path;
            }
        }
        throw new Error('Error trying to download percy binary');
    }
    async getBinaryPath(conf) {
        const destParentDir = await this._getAvailableDirs();
        const binaryPath = node_path_1.default.join(destParentDir, this._binaryName);
        if (await this.checkPath(binaryPath)) {
            return binaryPath;
        }
        const downloadedBinaryPath = await this.download(conf, destParentDir);
        const isValid = await this.validateBinary(downloadedBinaryPath);
        if (!isValid) {
            // retry once
            PercyLogger_1.PercyLogger.error('Corrupt percy binary, retrying');
            return await this.download(conf, destParentDir);
        }
        return downloadedBinaryPath;
    }
    async validateBinary(binaryPath) {
        const versionRegex = /^.*@percy\/cli \d.\d+.\d+/;
        return new Promise((resolve) => {
            const proc = (0, node_child_process_1.spawn)(binaryPath, ['--version']);
            proc.stdout.on('data', (data) => {
                if (versionRegex.test(data)) {
                    resolve(true);
                }
            });
            proc.on('close', () => {
                resolve(false);
            });
        });
    }
    async download(conf, destParentDir) {
        if (!await this.checkPath(destParentDir)) {
            await promises_1.default.mkdir(destParentDir);
        }
        const binaryName = this._binaryName;
        const zipFilePath = node_path_1.default.join(destParentDir, binaryName + '.zip');
        const binaryPath = node_path_1.default.join(destParentDir, binaryName);
        const downloadedFileStream = fs.createWriteStream(zipFilePath);
        return new Promise((resolve, reject) => {
            const stream = got_1.default.extend({ followRedirect: true }).get(this._httpPath, { isStream: true });
            stream.on('error', (err) => {
                PercyLogger_1.PercyLogger.error(`Got Error in percy binary download response: ${err}`);
            });
            stream.pipe(downloadedFileStream)
                .on('finish', () => {
                yauzl_1.default.open(zipFilePath, { lazyEntries: true }, function (err, zipfile) {
                    if (err) {
                        return reject(err);
                    }
                    zipfile.readEntry();
                    zipfile.on('entry', (entry) => {
                        if (/\/$/.test(entry.fileName)) {
                            // Directory file names end with '/'.
                            zipfile.readEntry();
                        }
                        else {
                            // file entry
                            const writeStream = fs.createWriteStream(node_path_1.default.join(destParentDir, entry.fileName));
                            zipfile.openReadStream(entry, function (zipErr, readStream) {
                                if (zipErr) {
                                    reject(err);
                                }
                                readStream.on('end', function () {
                                    writeStream.close();
                                    zipfile.readEntry();
                                });
                                readStream.pipe(writeStream);
                            });
                            if (entry.fileName === binaryName) {
                                zipfile.close();
                            }
                        }
                    });
                    zipfile.on('error', (zipErr) => {
                        reject(zipErr);
                    });
                    zipfile.once('end', () => {
                        fs.chmod(binaryPath, '0755', function (zipErr) {
                            if (zipErr) {
                                reject(zipErr);
                            }
                            resolve(binaryPath);
                        });
                        zipfile.close();
                    });
                });
            });
        });
    }
}
exports.default = PercyBinary;
