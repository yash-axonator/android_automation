"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_fs_1 = __importDefault(require("node:fs"));
const node_path_1 = __importDefault(require("node:path"));
const node_os_1 = __importDefault(require("node:os"));
const node_child_process_1 = require("node:child_process");
const util_1 = require("../util");
const PercyLogger_1 = require("./PercyLogger");
const PercyBinary_1 = __importDefault(require("./PercyBinary"));
const logDir = 'logs';
class Percy {
    constructor(options, config, bsConfig) {
        this._logfile = node_path_1.default.join(logDir, 'percy.log');
        this._address = process.env.PERCY_SERVER_ADDRESS || 'http://127.0.0.1:5338';
        this._binaryPath = null;
        this._proc = null;
        this._projectName = undefined;
        this.isProcessRunning = false;
        this._options = options;
        this._config = config;
        this._isApp = Boolean(options.app);
        this._projectName = bsConfig.projectName;
    }
    async getBinaryPath() {
        if (!this._binaryPath) {
            const pb = new PercyBinary_1.default();
            this._binaryPath = await pb.getBinaryPath(this._config);
        }
        return this._binaryPath;
    }
    async sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }
    async healthcheck() {
        try {
            const resp = await (0, util_1.nodeRequest)('GET', 'percy/healthcheck', null, this._address);
            if (resp) {
                return true;
            }
        }
        catch (err) {
            return false;
        }
    }
    async start() {
        const binaryPath = await this.getBinaryPath();
        const logStream = node_fs_1.default.createWriteStream(this._logfile, { flags: 'a' });
        const token = await this.fetchPercyToken();
        const configPath = await this.createPercyConfig();
        if (!token) {
            return false;
        }
        const commandArgs = [`${this._isApp ? 'app:exec' : 'exec'}:start`];
        if (configPath) {
            commandArgs.push('-c', configPath);
        }
        this._proc = (0, node_child_process_1.spawn)(binaryPath, commandArgs, { env: { ...process.env, PERCY_TOKEN: token } });
        this._proc.stdout.pipe(logStream);
        this._proc.stderr.pipe(logStream);
        this.isProcessRunning = true;
        const that = this;
        this._proc.on('close', function () {
            that.isProcessRunning = false;
        });
        do {
            const healthcheck = await this.healthcheck();
            if (healthcheck) {
                PercyLogger_1.PercyLogger.debug('Percy healthcheck successful');
                return true;
            }
            await this.sleep(1000);
        } while (this.isProcessRunning);
        return false;
    }
    async stop() {
        const binaryPath = await this.getBinaryPath();
        return new Promise((resolve) => {
            const proc = (0, node_child_process_1.spawn)(binaryPath, ['exec:stop']);
            proc.on('close', (code) => {
                this.isProcessRunning = false;
                resolve(code);
            });
        });
    }
    isRunning() {
        return this.isProcessRunning;
    }
    async fetchPercyToken() {
        const projectName = this._projectName;
        try {
            const type = this._isApp ? 'app' : 'automate';
            const response = await (0, util_1.nodeRequest)('GET', `api/app_percy/get_project_token?name=${projectName}&type=${type}`, {
                username: (0, util_1.getBrowserStackUser)(this._config),
                password: (0, util_1.getBrowserStackKey)(this._config)
            }, 'https://api.browserstack.com');
            PercyLogger_1.PercyLogger.debug('Percy fetch token success : ' + response.token);
            return response.token;
        }
        catch (err) {
            PercyLogger_1.PercyLogger.error(`Percy unable to fetch project token: ${err}`);
            return null;
        }
    }
    async createPercyConfig() {
        if (!this._options.percyOptions) {
            return null;
        }
        const configPath = node_path_1.default.join(node_os_1.default.tmpdir(), 'percy.json');
        const percyOptions = this._options.percyOptions;
        if (!percyOptions.version) {
            percyOptions.version = '2';
        }
        return new Promise((resolve) => {
            node_fs_1.default.writeFile(configPath, JSON.stringify(percyOptions), (err) => {
                if (err) {
                    PercyLogger_1.PercyLogger.error(`Error creating percy config: ${err}`);
                    resolve(null);
                }
                PercyLogger_1.PercyLogger.debug('Percy config created at ' + configPath);
                resolve(configPath);
            });
        });
    }
}
exports.default = Percy;
