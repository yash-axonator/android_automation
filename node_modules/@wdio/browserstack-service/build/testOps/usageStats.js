"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const featureStats_1 = __importDefault(require("./featureStats"));
const featureUsage_1 = __importDefault(require("./featureUsage"));
const bstackLogger_1 = require("../bstackLogger");
const testOpsConfig_1 = __importDefault(require("./testOpsConfig"));
class UsageStats {
    static getInstance() {
        if (!UsageStats.instance) {
            UsageStats.instance = new UsageStats();
        }
        return UsageStats.instance;
    }
    constructor() {
        this.testStartedStats = new featureStats_1.default();
        this.testFinishedStats = new featureStats_1.default();
        this.hookStartedStats = new featureStats_1.default();
        this.hookFinishedStats = new featureStats_1.default();
        this.cbtSessionStats = new featureStats_1.default();
        this.logStats = new featureStats_1.default();
        this.launchBuildUsage = new featureUsage_1.default();
        this.stopBuildUsage = new featureUsage_1.default();
    }
    add(usageStats) {
        this.testStartedStats.add(usageStats.testStartedStats);
        this.testFinishedStats.add(usageStats.testFinishedStats);
        this.hookStartedStats.add(usageStats.hookStartedStats);
        this.hookFinishedStats.add(usageStats.hookFinishedStats);
        this.cbtSessionStats.add(usageStats.cbtSessionStats);
        this.logStats.add(usageStats.logStats);
    }
    getFormattedData(workersData) {
        this.addDataFromWorkers(workersData);
        const testOpsConfig = testOpsConfig_1.default.getInstance();
        const usage = {
            enabled: testOpsConfig.enabled,
            manuallySet: testOpsConfig.manuallySet,
            buildHashedId: testOpsConfig.buildHashedId
        };
        if (!usage.enabled) {
            return usage;
        }
        try {
            usage.events = this.getEventsData();
        }
        catch (e) {
            bstackLogger_1.BStackLogger.debug('exception in getFormattedData: ' + e);
        }
        return usage;
    }
    addDataFromWorkers(workersData) {
        workersData.map(workerData => {
            try {
                const usageStatsForWorker = UsageStats.fromJSON(workerData.usageStats);
                this.add(usageStatsForWorker);
            }
            catch (e) {
                bstackLogger_1.BStackLogger.debug('Exception in adding workerData: ' + e);
            }
        });
    }
    getEventsData() {
        return {
            buildEvents: {
                started: this.launchBuildUsage.toJSON(),
                finished: this.stopBuildUsage.toJSON()
            },
            testEvents: {
                started: this.testStartedStats.toJSON(),
                finished: this.testFinishedStats.toJSON({ omitGroups: true }),
                ...this.testFinishedStats.toJSON({ onlyGroups: true })
            },
            hookEvents: {
                started: this.hookStartedStats.toJSON(),
                finished: this.hookFinishedStats.toJSON({ omitGroups: true }),
                ...this.hookFinishedStats.toJSON({ onlyGroups: true })
            },
            logEvents: this.logStats.toJSON(),
            cbtSessionEvents: this.cbtSessionStats.toJSON()
        };
    }
    getDataToSave() {
        return {
            testEvents: {
                started: this.testStartedStats.toJSON(),
                finished: this.testFinishedStats.toJSON({ nestedGroups: true }),
            },
            hookEvents: {
                started: this.hookStartedStats.toJSON(),
                finished: this.hookFinishedStats.toJSON({ nestedGroups: true }),
            },
            logEvents: this.logStats.toJSON({ nestedGroups: true }),
            cbtSessionEvents: this.cbtSessionStats.toJSON()
        };
    }
    static fromJSON(data) {
        const usageStats = new UsageStats();
        usageStats.testStartedStats = featureStats_1.default.fromJSON(data.testEvents.started);
        usageStats.testFinishedStats = featureStats_1.default.fromJSON(data.testEvents.finished);
        usageStats.hookStartedStats = featureStats_1.default.fromJSON(data.hookEvents.started);
        usageStats.hookFinishedStats = featureStats_1.default.fromJSON(data.hookEvents.finished);
        usageStats.logStats = featureStats_1.default.fromJSON(data.logEvents);
        usageStats.cbtSessionStats = featureStats_1.default.fromJSON(data.cbtSessionStats);
        return usageStats;
    }
}
exports.default = UsageStats;
