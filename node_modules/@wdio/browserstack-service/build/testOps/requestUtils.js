"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.sendScreenshots = exports.uploadEventData = void 0;
const constants_1 = require("../constants");
const bstackLogger_1 = require("../bstackLogger");
const util_1 = require("../util");
const got_1 = __importDefault(require("got"));
async function uploadEventData(eventData, eventUrl = constants_1.DATA_EVENT_ENDPOINT) {
    let logTag = 'BATCH_UPLOAD';
    if (!Array.isArray(eventData)) {
        logTag = (0, util_1.getLogTag)(eventData.event_type);
    }
    if (eventUrl === constants_1.DATA_SCREENSHOT_ENDPOINT) {
        logTag = 'screenshot_upload';
    }
    if (!process.env[constants_1.TESTOPS_BUILD_COMPLETED_ENV]) {
        throw new Error('Build start not completed yet');
    }
    if (!process.env[constants_1.TESTOPS_JWT_ENV]) {
        bstackLogger_1.BStackLogger.debug(`[${logTag}] Missing Authentication Token/ Build ID`);
        throw new Error('Token/buildID is undefined, build creation might have failed');
    }
    try {
        const url = `${constants_1.DATA_ENDPOINT}/${eventUrl}`;
        const data = await got_1.default.post(url, {
            agent: util_1.DEFAULT_REQUEST_CONFIG.agent,
            headers: {
                ...util_1.DEFAULT_REQUEST_CONFIG.headers,
                'Authorization': `Bearer ${process.env[constants_1.TESTOPS_JWT_ENV]}`
            },
            json: eventData
        }).json();
        bstackLogger_1.BStackLogger.debug(`[${logTag}] Success response: ${JSON.stringify(data)}`);
    }
    catch (error) {
        bstackLogger_1.BStackLogger.debug(`[${logTag}] Failed. Error: ${error}`);
        throw new Error('Request failed with exception: ' + error);
    }
}
exports.uploadEventData = uploadEventData;
function sendScreenshots(eventData) {
    return uploadEventData(eventData, constants_1.DATA_SCREENSHOT_ENDPOINT);
}
exports.sendScreenshots = sendScreenshots;
