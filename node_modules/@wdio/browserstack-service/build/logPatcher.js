"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const winston_transport_1 = __importDefault(require("winston-transport"));
const LOG_LEVELS = {
    INFO: 'INFO', ERROR: 'ERROR', DEBUG: 'DEBUG', TRACE: 'TRACE', WARN: 'WARN',
};
class logPatcher extends winston_transport_1.default {
    constructor(opts) {
        super(opts);
        this.logToTestOps = (level = LOG_LEVELS.INFO, message = ['']) => {
            process.emit(`bs:addLog:${process.pid}`, {
                timestamp: new Date().toISOString(),
                level: level.toUpperCase(),
                message: `"${message.join(', ')}"`,
                kind: 'TEST_LOG',
                http_response: {}
            });
        };
        /* Patching this would show user an extended trace on their cli */
        this.trace = (...message) => {
            this.logToTestOps(LOG_LEVELS.TRACE, message);
        };
        this.debug = (...message) => {
            this.logToTestOps(LOG_LEVELS.DEBUG, message);
        };
        this.info = (...message) => {
            this.logToTestOps(LOG_LEVELS.INFO, message);
        };
        this.warn = (...message) => {
            this.logToTestOps(LOG_LEVELS.WARN, message);
        };
        this.error = (...message) => {
            this.logToTestOps(LOG_LEVELS.ERROR, message);
        };
        this.log = (...message) => {
            this.logToTestOps(LOG_LEVELS.INFO, message);
        };
    }
}
exports.default = logPatcher;
