"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const os_1 = __importDefault(require("os"));
class AccessibilityScripts {
    // don't allow to create instances from it other than through `checkAndGetInstance`
    constructor() {
        this.performScan = null;
        this.getResults = null;
        this.getResultsSummary = null;
        this.saveTestResults = null;
        this.commandsToWrap = null;
        this.browserstackFolderPath = path_1.default.join(os_1.default.homedir(), '.browserstack');
        this.commandsPath = path_1.default.join(this.browserstackFolderPath, 'commands.json');
    }
    static checkAndGetInstance() {
        if (!AccessibilityScripts.instance) {
            AccessibilityScripts.instance = new AccessibilityScripts();
            AccessibilityScripts.instance.readFromExistingFile();
        }
        return AccessibilityScripts.instance;
    }
    readFromExistingFile() {
        try {
            if (fs_1.default.existsSync(this.commandsPath)) {
                const data = fs_1.default.readFileSync(this.commandsPath, 'utf8');
                if (data) {
                    this.update(JSON.parse(data));
                }
            }
        }
        catch (error) {
            /* Do nothing */
        }
    }
    update(data) {
        if (data.scripts) {
            this.performScan = data.scripts.scan;
            this.getResults = data.scripts.getResults;
            this.getResultsSummary = data.scripts.getResultsSummary;
            this.saveTestResults = data.scripts.saveResults;
        }
        if (data.commands && data.commands.length) {
            this.commandsToWrap = data.commands;
        }
    }
    store() {
        if (!fs_1.default.existsSync(this.browserstackFolderPath)) {
            fs_1.default.mkdirSync(this.browserstackFolderPath);
        }
        fs_1.default.writeFileSync(this.commandsPath, JSON.stringify({
            commands: this.commandsToWrap,
            scripts: {
                scan: this.performScan,
                getResults: this.getResults,
                getResultsSummary: this.getResultsSummary,
                saveResults: this.saveTestResults,
            }
        }));
    }
}
AccessibilityScripts.instance = null;
exports.default = AccessibilityScripts.checkAndGetInstance();
