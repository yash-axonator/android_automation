"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("./util");
const fs_1 = __importDefault(require("fs"));
const bstackLogger_1 = require("./bstackLogger");
const funnelInstrumentation_1 = require("./instrumentation/funnelInstrumentation");
const constants_1 = require("./constants");
const process = __importStar(require("process"));
class BStackCleanup {
    static async startCleanup() {
        // Get funnel data object from saved file
        const funnelDataCleanup = process.argv.includes('--funnelData');
        let funnelData = null;
        if (funnelDataCleanup) {
            const index = process.argv.indexOf('--funnelData');
            const filePath = process.argv[index + 1];
            funnelData = this.getFunnelDataFromFile(filePath);
        }
        if (process.argv.includes('--observability')) {
            await this.executeObservabilityCleanup(funnelData);
        }
        if (funnelDataCleanup && funnelData) {
            await this.sendFunnelData(funnelData);
        }
    }
    static async executeObservabilityCleanup(funnelData) {
        if (!process.env[constants_1.TESTOPS_JWT_ENV]) {
            return;
        }
        bstackLogger_1.BStackLogger.debug('Executing observability cleanup');
        try {
            const result = await (0, util_1.stopBuildUpstream)();
            if (process.env[constants_1.TESTOPS_BUILD_ID_ENV]) {
                bstackLogger_1.BStackLogger.info(`\nVisit https://observability.browserstack.com/builds/${process.env[constants_1.TESTOPS_BUILD_ID_ENV]} to view build report, insights, and many more debugging information all at one place!\n`);
            }
            const status = (result && result.status) || 'failed';
            const message = (result && result.message);
            this.updateO11yStopData(funnelData, status, status === 'failed' ? message : undefined);
        }
        catch (e) {
            bstackLogger_1.BStackLogger.error('Error in stopping Observability build: ' + e);
            this.updateO11yStopData(funnelData, 'failed', e);
        }
    }
    static updateO11yStopData(funnelData, status, error = undefined) {
        var _a, _b;
        const toData = (_b = (_a = funnelData === null || funnelData === void 0 ? void 0 : funnelData.event_properties) === null || _a === void 0 ? void 0 : _a.productUsage) === null || _b === void 0 ? void 0 : _b.testObservability;
        // Return if no O11y data in funnel data
        if (!toData) {
            return;
        }
        let existingStopData = toData.events.buildEvents.finished;
        existingStopData = existingStopData || {};
        existingStopData = {
            ...existingStopData,
            status,
            error: (0, util_1.getErrorString)(error),
            stoppedFrom: 'exitHook'
        };
        toData.events.buildEvents.finished = existingStopData;
    }
    static async sendFunnelData(funnelData) {
        try {
            await (0, funnelInstrumentation_1.fireFunnelRequest)(funnelData);
            bstackLogger_1.BStackLogger.debug('Funnel data sent successfully from cleanup');
        }
        catch (e) {
            bstackLogger_1.BStackLogger.error('Error in sending funnel data: ' + e);
        }
    }
    static removeFunnelDataFile(filePath) {
        if (!filePath) {
            return;
        }
        fs_1.default.rmSync(filePath, { force: true });
    }
    static getFunnelDataFromFile(filePath) {
        if (!filePath) {
            return null;
        }
        bstackLogger_1.BStackLogger.debug('Getting saved funnel data from file ' + filePath);
        const content = fs_1.default.readFileSync(filePath, 'utf8');
        const data = JSON.parse(content);
        this.removeFunnelDataFile(filePath);
        return data;
    }
}
exports.default = BStackCleanup;
(async () => await BStackCleanup.startCleanup())();
